const XLSX = require('xlsx');
const db = require('../config/db');

class ExcelController {
    static async generateOrderList(req, res) {
        try {
            // Query chemicals that need reordering (â‰¤25% stock)
            const result = await db.query(`
                SELECT
                    ROW_NUMBER() OVER (ORDER BY c.name) as serial_number,
                    c.name as chemical_name,
                    c.initial_quantity,
                    c.quantity as current_stock,
                    c.unit,
                    ROUND(c.initial_quantity * 0.25, 2) as reorder_threshold,
                    GREATEST(c.initial_quantity - c.quantity, 0) as required_quantity,
                    COALESCE(c.supplier, 'Not specified') as supplier
                FROM chemicals c
                WHERE c.quantity <= (c.initial_quantity * 0.25)
                    AND c.initial_quantity > 0
                    AND (c.expiry_date > CURRENT_DATE OR c.expiry_date IS NULL)
                ORDER BY c.name
            `);

            const chemicals = result.rows;

            if (chemicals.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'No chemicals require reordering at this time'
                });
            }

            // Create workbook and worksheet
            const workbook = XLSX.utils.book_new();

            // Prepare data with headers
            const currentDate = new Date().toLocaleDateString();
            const userName = req.user.name || 'System User';

            // Header information
            const headerData = [
                ['Chemical Order List'],
                [''],
                [`Order Date: ${currentDate}`],
                [`Generated By: ${userName}`],
                ['Lab/Department: Chemistry Laboratory'],
                [''],
                ['Serial Number', 'Chemical Name', 'Initial Stock', 'Current Stock', 'Unit', 'Reorder Threshold', 'Required Quantity', 'Supplier']
            ];

            // Add chemical data
            chemicals.forEach(chemical => {
                headerData.push([
                    chemical.serial_number,
                    chemical.chemical_name,
                    chemical.initial_quantity,
                    chemical.current_stock,
                    chemical.unit,
                    chemical.reorder_threshold,
                    chemical.required_quantity,
                    chemical.supplier
                ]);
            });

            // Add footer
            headerData.push(['']);
            headerData.push(['']);
            headerData.push(['Approved By: ______________________']);
            headerData.push(['Signature:   ______________________']);
            headerData.push(['Date:        ______________________']);

            // Create worksheet
            const worksheet = XLSX.utils.aoa_to_sheet(headerData);

            // Apply formatting
            const range = XLSX.utils.decode_range(worksheet['!ref']);

            // Title formatting (merge cells for title)
            worksheet['!merges'] = [
                { s: { r: 0, c: 0 }, e: { r: 0, c: 7 } } // Merge title row
            ];

            // Header row styling (row 7 is the actual table header)
            for (let col = 0; col <= 7; col++) {
                const cellRef = XLSX.utils.encode_cell({ r: 6, c: col });
                if (worksheet[cellRef]) {
                    worksheet[cellRef].s = {
                        font: { bold: true },
                        fill: { fgColor: { rgb: 'E0E0E0' } }
                    };
                }
            }

            // Auto-width columns
            const colWidths = [
                { wpx: 80 },   // Serial Number
                { wpx: 200 },  // Chemical Name
                { wpx: 100 },  // Initial Stock
                { wpx: 100 },  // Current Stock
                { wpx: 60 },   // Unit
                { wpx: 120 },  // Reorder Threshold
                { wpx: 120 },  // Required Quantity
                { wpx: 150 }   // Supplier
            ];
            worksheet['!cols'] = colWidths;

            // Add worksheet to workbook
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Order List');

            // Generate Excel buffer
            const excelBuffer = XLSX.write(workbook, {
                type: 'buffer',
                bookType: 'xlsx'
            });

            // Set response headers
            const filename = `Chemical_Order_List_${new Date().toISOString().split('T')[0]}.xlsx`;
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

            res.send(excelBuffer);

        } catch (error) {
            console.error('Error generating order list:', error);
            res.status(500).json({
                success: false,
                message: 'Failed to generate order list'
            });
        }
    }
}

module.exports = ExcelController;