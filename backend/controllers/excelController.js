const XLSX = require('xlsx');
const db = require('../config/db');

class ExcelController {
    static async generateOrderList(req, res) {
        try {
            // Query chemicals that need reordering (â‰¤25% stock)
            const result = await db.query(`
                SELECT
                    ROW_NUMBER() OVER (ORDER BY c.name) as serial_number,
                    c.name as chemical_name,
                    c.category,
                    c.initial_quantity,
                    c.quantity as current_stock,
                    c.unit,
                    ROUND(c.initial_quantity * 0.25, 2) as reorder_threshold,
                    GREATEST(c.initial_quantity - c.quantity, 0) as required_quantity,
                    COALESCE(c.supplier, 'Not specified') as supplier,
                    ROUND((c.quantity/NULLIF(c.initial_quantity,0)) * 100, 1) as stock_percentage
                FROM chemicals c
                WHERE c.quantity <= (c.initial_quantity * 0.25)
                    AND c.initial_quantity > 0
                    AND (c.expiry_date > CURRENT_DATE OR c.expiry_date IS NULL)
                ORDER BY c.name
            `);

            const chemicals = result.rows;
            
            if (chemicals.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'No chemicals require reordering at this time'
                });
            }

            // Create workbook and worksheet
            const workbook = XLSX.utils.book_new();
            
            // Simple header information
            const currentDate = new Date().toLocaleDateString();
            const userName = req.user.name || 'System User';
            
            // Clean, simple data structure
            const headerData = [
                ['Chemical Order List'],
                [''],
                [`Order Date: ${currentDate}`],
                [`Generated By: ${userName}`],
                ['Lab/Department: Chemistry Laboratory'],
                [''],
                ['Serial Number', 'Chemical Name', 'Category', 'Initial Stock', 'Current Stock', 'Unit', 'Stock %', 'Required Quantity', 'Supplier']
            ];

            // Add chemical data without complex formatting
            chemicals.forEach(chemical => {
                headerData.push([
                    chemical.serial_number || '',
                    chemical.chemical_name || '',
                    chemical.category || '',
                    Number(chemical.initial_quantity) || 0,
                    Number(chemical.current_stock) || 0,
                    chemical.unit || '',
                    `${chemical.stock_percentage}%`,
                    Number(chemical.required_quantity) || 0,
                    chemical.supplier || ''
                ]);
            });

            // Simple footer
            headerData.push(['']);
            headerData.push(['Approved By: ______________________']);
            headerData.push(['Signature:   ______________________']);
            headerData.push(['Date:        ______________________']);

            // Create worksheet with clean data
            const worksheet = XLSX.utils.aoa_to_sheet(headerData);

            // Simple column widths only
            worksheet['!cols'] = [
                { wch: 10 }, // Serial
                { wch: 25 }, // Chemical Name
                { wch: 15 }, // Category
                { wch: 12 }, // Initial Stock
                { wch: 12 }, // Current Stock
                { wch: 8 },  // Unit
                { wch: 10 }, // Stock %
                { wch: 15 }, // Required Quantity
                { wch: 20 }  // Supplier
            ];

            // Add worksheet to workbook
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Order List');

            // Generate Excel buffer with minimal settings
            const excelBuffer = XLSX.write(workbook, {
                type: 'buffer',
                bookType: 'xlsx'
            });

            // Set response headers
            const filename = `Chemical_Order_List_${new Date().toISOString().split('T')[0]}.xlsx`;
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

            res.send(excelBuffer);

        } catch (error) {
            console.error('Error generating order list:', error);
            res.status(500).json({
                success: false,
                message: 'Failed to generate order list'
            });
        }
    }

    static async generateEquipmentReport(req, res) {
        try {
            // Query equipment that needs attention
            const result = await db.query(`
                SELECT
                    ROW_NUMBER() OVER (ORDER BY
                        CASE
                            WHEN next_calibration_date < CURRENT_DATE THEN 1
                            WHEN last_maintenance_date + INTERVAL '1 day' * maintenance_schedule < CURRENT_DATE THEN 2
                            ELSE 3
                        END, e.name
                    ) as serial_number,
                    COALESCE(e.serial_number, 'N/A') as equipment_serial,
                    e.name as item,
                    CASE
                        WHEN (last_maintenance_date + INTERVAL '1 day' * maintenance_schedule < CURRENT_DATE)
                             AND (next_calibration_date < CURRENT_DATE) THEN 'Both Overdue'
                        WHEN last_maintenance_date + INTERVAL '1 day' * maintenance_schedule < CURRENT_DATE THEN 'Maintenance Overdue'
                        WHEN next_calibration_date < CURRENT_DATE THEN 'Calibration Overdue'
                        WHEN next_calibration_date <= CURRENT_DATE + INTERVAL '30 days' THEN 'Calibration Due Soon'
                        WHEN last_maintenance_date + INTERVAL '1 day' * maintenance_schedule <= CURRENT_DATE + INTERVAL '30 days' THEN 'Maintenance Due Soon'
                        ELSE 'Scheduled'
                    END as issue_type,
                    CASE
                        WHEN next_calibration_date < CURRENT_DATE THEN
                            (CURRENT_DATE - next_calibration_date) || ' days overdue'
                        WHEN next_calibration_date <= CURRENT_DATE + INTERVAL '30 days' THEN
                            (next_calibration_date - CURRENT_DATE) || ' days until due'
                        WHEN last_maintenance_date + INTERVAL '1 day' * maintenance_schedule < CURRENT_DATE THEN
                            (CURRENT_DATE - (last_maintenance_date + INTERVAL '1 day' * maintenance_schedule)) || ' days overdue'
                        WHEN last_maintenance_date + INTERVAL '1 day' * maintenance_schedule <= CURRENT_DATE + INTERVAL '30 days' THEN
                            ((last_maintenance_date + INTERVAL '1 day' * maintenance_schedule) - CURRENT_DATE) || ' days until due'
                        ELSE 'Current'
                    END as days_status,
                    e.location,
                    e.condition,
                    COALESCE(e.last_maintenance_date, e.calibration_date) as last_action_date
                FROM equipment e
                WHERE (last_maintenance_date + INTERVAL '1 day' * maintenance_schedule <= CURRENT_DATE + INTERVAL '30 days')
                   OR (next_calibration_date <= CURRENT_DATE + INTERVAL '30 days' AND next_calibration_date IS NOT NULL)
                ORDER BY
                    CASE
                        WHEN next_calibration_date < CURRENT_DATE THEN 1
                        WHEN last_maintenance_date + INTERVAL '1 day' * maintenance_schedule < CURRENT_DATE THEN 2
                        ELSE 3
                    END, e.name
            `);

            const equipment = result.rows;

            if (equipment.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'No equipment requires maintenance or calibration attention at this time'
                });
            }

            // Create workbook and worksheet
            const workbook = XLSX.utils.book_new();

            // Simple header information
            const currentDate = new Date().toLocaleDateString();
            const userName = req.user.name || 'System User';

            // Clean data structure
            const headerData = [
                ['Equipment Maintenance & Calibration Report'],
                [''],
                [`Report Date: ${currentDate}`],
                [`Generated By: ${userName}`],
                ['Lab/Department: Chemistry Laboratory'],
                [''],
                ['Serial Number', 'Equipment Serial', 'Item', 'Issue Type', 'Days Status', 'Location', 'Condition', 'Last Action Date']
            ];

            // Add equipment data
            equipment.forEach(item => {
                headerData.push([
                    item.serial_number || '',
                    item.equipment_serial || '',
                    item.item || '',
                    item.issue_type || '',
                    item.days_status || '',
                    item.location || '',
                    item.condition || '',
                    item.last_action_date ? new Date(item.last_action_date).toLocaleDateString() : 'N/A'
                ]);
            });

            // Simple footer
            headerData.push(['']);
            headerData.push(['Reviewed By: ______________________']);
            headerData.push(['Maintenance Supervisor: ______________________']);
            headerData.push(['Date: ______________________']);

            // Create worksheet
            const worksheet = XLSX.utils.aoa_to_sheet(headerData);

            // Simple column widths
            worksheet['!cols'] = [
                { wch: 8 },  // Serial Number
                { wch: 15 }, // Equipment Serial
                { wch: 25 }, // Item
                { wch: 20 }, // Issue Type
                { wch: 15 }, // Days Status
                { wch: 15 }, // Location
                { wch: 12 }, // Condition
                { wch: 15 }  // Last Action Date
            ];

            // Add worksheet to workbook
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Equipment Report');

            // Generate Excel buffer
            const excelBuffer = XLSX.write(workbook, {
                type: 'buffer',
                bookType: 'xlsx'
            });

            // Set response headers
            const filename = `Equipment_Maintenance_Report_${new Date().toISOString().split('T')[0]}.xlsx`;
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

            res.send(excelBuffer);

        } catch (error) {
            console.error('Error generating equipment report:', error);
            res.status(500).json({
                success: false,
                message: 'Failed to generate equipment report'
            });
        }
    }
}

module.exports = ExcelController;