const XLSX = require('xlsx');
const db = require('../config/db');

class ExcelController {
    static async generateOrderList(req, res) {
        try {
            // Query chemicals that need reordering (â‰¤25% stock)
            const result = await db.query(`
                SELECT
                    ROW_NUMBER() OVER (ORDER BY c.name) as serial_number,
                    c.name as chemical_name,
                    c.category,
                    c.initial_quantity,
                    c.quantity as current_stock,
                    c.unit,
                    ROUND(c.initial_quantity * 0.25, 2) as reorder_threshold,
                    GREATEST(c.initial_quantity - c.quantity, 0) as required_quantity,
                    COALESCE(c.supplier, 'Not specified') as supplier,
                    ROUND((c.quantity/NULLIF(c.initial_quantity,0)) * 100, 1) as stock_percentage
                FROM chemicals c
                WHERE c.quantity <= (c.initial_quantity * 0.25)
                    AND c.initial_quantity > 0
                    AND (c.expiry_date > CURRENT_DATE OR c.expiry_date IS NULL)
                ORDER BY c.name
            `);

            const chemicals = result.rows;
            
            if (chemicals.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'No chemicals require reordering at this time'
                });
            }

            // Create workbook and worksheet
            const workbook = XLSX.utils.book_new();
            
            // Simple header information
            const currentDate = new Date().toLocaleDateString();
            const userName = req.user.name || 'System User';
            
            // Clean, simple data structure
            const headerData = [
                ['Chemical Order List'],
                [''],
                [`Order Date: ${currentDate}`],
                [`Generated By: ${userName}`],
                ['Lab/Department: Chemistry Laboratory'],
                [''],
                ['Serial Number', 'Chemical Name', 'Category', 'Initial Stock', 'Current Stock', 'Unit', 'Stock %', 'Required Quantity', 'Supplier']
            ];

            // Add chemical data without complex formatting
            chemicals.forEach(chemical => {
                headerData.push([
                    chemical.serial_number || '',
                    chemical.chemical_name || '',
                    chemical.category || '',
                    Number(chemical.initial_quantity) || 0,
                    Number(chemical.current_stock) || 0,
                    chemical.unit || '',
                    `${chemical.stock_percentage}%`,
                    Number(chemical.required_quantity) || 0,
                    chemical.supplier || ''
                ]);
            });

            // Simple footer
            headerData.push(['']);
            headerData.push(['Approved By: ______________________']);
            headerData.push(['Signature:   ______________________']);
            headerData.push(['Date:        ______________________']);

            // Create worksheet with clean data
            const worksheet = XLSX.utils.aoa_to_sheet(headerData);

            // Simple column widths only
            worksheet['!cols'] = [
                { wch: 10 }, // Serial
                { wch: 25 }, // Chemical Name
                { wch: 15 }, // Category
                { wch: 12 }, // Initial Stock
                { wch: 12 }, // Current Stock
                { wch: 8 },  // Unit
                { wch: 10 }, // Stock %
                { wch: 15 }, // Required Quantity
                { wch: 20 }  // Supplier
            ];

            // Add worksheet to workbook
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Order List');

            // Generate Excel buffer with minimal settings
            const excelBuffer = XLSX.write(workbook, {
                type: 'buffer',
                bookType: 'xlsx'
            });

            // Set response headers
            const filename = `Chemical_Order_List_${new Date().toISOString().split('T')[0]}.xlsx`;
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

            res.send(excelBuffer);

        } catch (error) {
            console.error('Error generating order list:', error);
            res.status(500).json({
                success: false,
                message: 'Failed to generate order list'
            });
        }
    }
}

module.exports = ExcelController;