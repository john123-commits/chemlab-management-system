const XLSX = require('xlsx');
const db = require('../config/db');

class ExcelController {
    static async generateOrderList(req, res) {
        try {
            // Query chemicals that need reordering (≤25% stock)
            const result = await db.query(`
                SELECT
                    ROW_NUMBER() OVER (ORDER BY c.name) as serial_number,
                    c.name as chemical_name,
                    c.initial_quantity,
                    c.quantity as current_stock,
                    c.unit,
                    ROUND(c.initial_quantity * 0.25, 2) as reorder_threshold,
                    GREATEST(c.initial_quantity - c.quantity, 0) as required_quantity,
                    COALESCE(c.supplier, 'Not specified') as supplier,
                    COALESCE(c.c_number, 'N/A') as cas_number,
                    COALESCE(c.physical_state, 'N/A') as physical_state,
                    COALESCE(c.storage_location, 'Main Lab') as location,
                    c.expiry_date,
                    COALESCE(c.cost_per_unit, 0) as cost_per_unit,
                    COALESCE(c.hazard_class, 'Not specified') as hazard_class
                FROM chemicals c
                WHERE c.quantity <= (c.initial_quantity * 0.25)
                    AND c.initial_quantity > 0
                    AND (c.expiry_date > CURRENT_DATE OR c.expiry_date IS NULL)
                ORDER BY c.name
            `);

            const chemicals = result.rows;

            if (chemicals.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'No chemicals require reordering at this time'
                });
            }

            // Create workbook and worksheet
            const workbook = XLSX.utils.book_new();

            // Prepare data with professional headers
            const currentDate = new Date().toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            const currentTime = new Date().toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });
            const userName = req.user.name || 'System User';

            // Professional header section
            const headerData = [
                // Main title
                ['CHEMISTRY LABORATORY MANAGEMENT SYSTEM'],
                [''],
                // Order information
                ['REORDER REQUEST FORM'],
                [''],
                // Metadata table
                ['Order Information', '', '', 'Generated Information', '', ''],
                ['Order Date:', currentDate, '', 'Generated By:', userName, ''],
                ['Order Time:', currentTime, '', 'Department:', 'Chemistry Laboratory', ''],
                ['Request ID:', `REQ-${Date.now()}`, '', 'Contact:', 'lab.manager@institution.edu', ''],
                ['Priority:', 'Standard', '', 'Phone:', '+1 (555) 123-4567', ''],
                ['Status:', 'Pending Approval', '', 'Version:', '1.0', ''],
                [''],
                // Summary statistics
                ['ORDER SUMMARY'],
                [''],
                ['Total Items:', chemicals.length, '', 'Total Quantity:', chemicals.reduce((sum, c) => sum + parseFloat(c.required_quantity || 0), 0), ''],
                ['Critical Items:', chemicals.filter(c => parseFloat(c.current_stock || 0) === 0).length, '', 'Urgent Items:', chemicals.filter(c => (parseFloat(c.current_stock || 0) / parseFloat(c.initial_quantity || 1)) < 0.1).length, ''],
                [''],
                // Column headers with professional styling
                ['#', 'Chemical Information', '', '', 'Stock Information', '', '', 'Additional Details', '', ''],
                ['', 'Chemical Name', 'CAS Number', 'Physical State', 'Initial Stock', 'Current Stock', 'Reorder Point', 'Required Qty', 'Supplier', 'Location'],
                ['', '', '', '', '', '', '', '', '', '']
            ];

            // Add chemical data with professional formatting
            chemicals.forEach((chemical, index) => {
                const stockPercentage = (parseFloat(chemical.current_stock || 0) / parseFloat(chemical.initial_quantity || 1)) * 100;
                const isCritical = stockPercentage === 0;
                const isUrgent = stockPercentage < 10;

                headerData.push([
                    chemical.serial_number,
                    chemical.chemical_name,
                    chemical.cas_number,
                    chemical.physical_state,
                    chemical.initial_quantity,
                    chemical.current_stock,
                    chemical.reorder_threshold,
                    chemical.required_quantity,
                    chemical.supplier,
                    chemical.location
                ]);
            });

            // Add spacing and professional footer
            headerData.push(['']);
            headerData.push(['']);
            headerData.push(['REORDER NOTES & INSTRUCTIONS']);
            headerData.push(['• All orders should be placed within 48 hours of approval']);
            headerData.push(['• Critical items (0% stock) require immediate attention']);
            headerData.push(['• Please verify supplier information before placing orders']);
            headerData.push(['• Include MSDS and safety documentation with delivery']);
            headerData.push(['']);
            headerData.push(['APPROVAL SECTION']);
            headerData.push(['']);
            headerData.push(['Requested By:', userName, '', 'Date:', currentDate, '']);
            headerData.push(['']);
            headerData.push(['Lab Manager Approval:', '______________________', '', 'Date:', '______________________', '']);
            headerData.push(['']);
            headerData.push(['Department Head Approval:', '______________________', '', 'Date:', '______________________', '']);
            headerData.push(['']);
            headerData.push(['Procurement Approval:', '______________________', '', 'Date:', '______________________', '']);
            headerData.push(['']);
            headerData.push(['COMMENTS:']);
            headerData.push(['________________________________________________________________________________']);
            headerData.push(['________________________________________________________________________________']);
            headerData.push(['________________________________________________________________________________']);

            // Create worksheet
            const worksheet = XLSX.utils.aoa_to_sheet(headerData);

            // Professional cell styling
            const range = XLSX.utils.decode_range(worksheet['!ref']);

            // Merge cells for titles and headers
            worksheet['!merges'] = [
                // Main title
                { s: { r: 0, c: 0 }, e: { r: 0, c: 9 } },
                // Reorder request form title
                { s: { r: 2, c: 0 }, e: { r: 2, c: 9 } },
                // Order summary title
                { s: { r: 15, c: 0 }, e: { r: 15, c: 9 } },
                // Reorder notes title
                { s: { r: 37, c: 0 }, e: { r: 37, c: 9 } },
                // Approval section title
                { s: { r: 41, c: 0 }, e: { r: 41, c: 9 } },
                // Comments section
                { s: { r: 49, c: 0 }, e: { r: 49, c: 9 } },
                // Merge metadata rows
                { s: { r: 5, c: 0 }, e: { r: 5, c: 2 } }, // Order Information
                { s: { r: 5, c: 3 }, e: { r: 5, c: 5 } }, // Generated Information
                { s: { r: 6, c: 0 }, e: { r: 6, c: 2 } }, // Order Date row
                { s: { r: 6, c: 3 }, e: { r: 6, c: 5 } }, // Generated By row
                { s: { r: 7, c: 0 }, e: { r: 7, c: 2 } }, // Order Time row
                { s: { r: 7, c: 3 }, e: { r: 7, c: 5 } }, // Department row
                { s: { r: 8, c: 0 }, e: { r: 8, c: 2 } }, // Request ID row
                { s: { r: 8, c: 3 }, e: { r: 8, c: 5 } }, // Contact row
                { s: { r: 9, c: 0 }, e: { r: 9, c: 2 } }, // Priority row
                { s: { r: 9, c: 3 }, e: { r: 9, c: 5 } }, // Phone row
                { s: { r: 10, c: 0 }, e: { r: 10, c: 2 } }, // Status row
                { s: { r: 10, c: 3 }, e: { r: 10, c: 5 } }, // Version row
                // Summary statistics
                { s: { r: 13, c: 0 }, e: { r: 13, c: 2 } }, // Total Items
                { s: { r: 13, c: 3 }, e: { r: 13, c: 5 } }, // Total Quantity
                { s: { r: 14, c: 0 }, e: { r: 14, c: 2 } }, // Critical Items
                { s: { r: 14, c: 3 }, e: { r: 14, c: 5 } }, // Urgent Items
                // Column headers
                { s: { r: 16, c: 0 }, e: { r: 16, c: 9 } }, // Main column header row
                // Requested By row
                { s: { r: 43, c: 0 }, e: { r: 43, c: 2 } },
                { s: { r: 43, c: 3 }, e: { r: 43, c: 5 } },
                // Lab Manager row
                { s: { r: 45, c: 0 }, e: { r: 45, c: 2 } },
                { s: { r: 45, c: 3 }, e: { r: 45, c: 5 } },
                // Department Head row
                { s: { r: 47, c: 0 }, e: { r: 47, c: 2 } },
                { s: { r: 47, c: 3 }, e: { r: 47, c: 5 } },
                // Procurement row
                { s: { r: 49, c: 0 }, e: { r: 49, c: 2 } },
                { s: { r: 49, c: 3 }, e: { r: 49, c: 5 } }
            ];

            // Apply professional styling
            const titleStyle = {
                font: { bold: true, sz: 16, color: { rgb: 'FFFFFF' } },
                fill: { fgColor: { rgb: '4F81BD' } },
                alignment: { horizontal: 'center', vertical: 'center' }
            };

            const headerStyle = {
                font: { bold: true, color: { rgb: 'FFFFFF' } },
                fill: { fgColor: { rgb: '8064A2' } },
                alignment: { horizontal: 'center', vertical: 'center' }
            };

            const subHeaderStyle = {
                font: { bold: true },
                fill: { fgColor: { rgb: 'D9E1F2' } },
                alignment: { horizontal: 'left', vertical: 'center' }
            };

            const dataStyle = {
                font: { sz: 11 },
                alignment: { horizontal: 'left', vertical: 'center' }
            };

            const numberStyle = {
                font: { sz: 11 },
                alignment: { horizontal: 'right', vertical: 'center' }
            };

            // Apply styles to cells
            for (let row = 0; row <= range.e.r; row++) {
                for (let col = 0; col <= range.e.c; col++) {
                    const cellRef = XLSX.utils.encode_cell({ r: row, c: col });
                    if (worksheet[cellRef]) {
                        const cell = worksheet[cellRef];

                        // Title styling
                        if (row === 0 || row === 2 || row === 15 || row === 37 || row === 41 || row === 49) {
                            cell.s = titleStyle;
                        }
                        // Header styling
                        else if (row === 16) {
                            cell.s = headerStyle;
                        }
                        // Sub-header styling
                        else if (row === 5 || row === 6 || row === 7 || row === 8 || row === 9 || row === 10 ||
                                row === 13 || row === 14 || row === 43 || row === 45 || row === 47) {
                            cell.s = subHeaderStyle;
                        }
                        // Data styling
                        else if (row >= 18 && row <= 35) {
                            if (col === 0 || col >= 4) { // Numbers and serial
                                cell.s = numberStyle;
                            } else {
                                cell.s = dataStyle;
                            }
                        }
                    }
                }
            }

            // Set column widths for professional appearance
            const colWidths = [
                { wpx: 60 },   // Serial Number
                { wpx: 200 },  // Chemical Name
                { wpx: 100 },  // CAS Number
                { wpx: 80 },   // Physical State
                { wpx: 100 },  // Initial Stock
                { wpx: 100 },  // Current Stock
                { wpx: 100 },  // Reorder Point
                { wpx: 100 },  // Required Qty
                { wpx: 150 },  // Supplier
                { wpx: 120 }   // Location
            ];
            worksheet['!cols'] = colWidths;

            // Add borders to all cells
            const borderStyle = {
                border: {
                    top: { style: 'thin', color: { rgb: '000000' } },
                    bottom: { style: 'thin', color: { rgb: '000000' } },
                    left: { style: 'thin', color: { rgb: '000000' } },
                    right: { style: 'thin', color: { rgb: '000000' } }
                }
            };

            for (let row = 0; row <= range.e.r; row++) {
                for (let col = 0; col <= range.e.c; col++) {
                    const cellRef = XLSX.utils.encode_cell({ r: row, c: col });
                    if (worksheet[cellRef]) {
                        worksheet[cellRef].s = {
                            ...worksheet[cellRef].s,
                            ...borderStyle
                        };
                    }
                }
            }

            // Add worksheet to workbook
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Chemical Reorder Form');

            // Generate Excel buffer with professional settings
            const excelBuffer = XLSX.write(workbook, {
                type: 'buffer',
                bookType: 'xlsx',
                cellStyles: true
            });

            // Set professional response headers
            const timestamp = new Date().toISOString().split('T')[0];
            const filename = `Chemical_Reorder_Request_${timestamp}.xlsx`;
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

            res.send(excelBuffer);

        } catch (error) {
            console.error('Error generating professional order list:', error);
            res.status(500).json({
                success: false,
                message: 'Failed to generate professional order list'
            });
        }
    }
}

module.exports = ExcelController;